/*
 *  電圧の測定はサーミスタの電圧降下を測定
 * 
 *      |
 *      _
 *     | | R=10kΩ
 *     | |
 *      -
 *      |
 *      ・-----・ Vd(アナログピンで読み取り、10bitADCで変換されるので実際の電圧にするには4.9mVを掛け算する)
 *      |
 *      _
 *     | | サーミスタ r
 *     | |
 *      -
 *      |
 *      
 *    Vd = { 5/(10k+r) } x r よりrを算出
 *      
 *  温度T0=25度のときのサーミスタの抵抗値R0=10kΩ
 *  データシートよりB定数(25度/50度)は3380K
 * 
 *  抵抗から温度を算出する式
 *    T = 1/{ln(r/R0)/B + 1/(T0+273)} -273
 */

#ifndef AMS_TEMP_MONITOR
#define AMS_TEMP_MONITOR

//-------------------------------------------------------
#include <math.h>

//-------------------------------------------------------
//  マクロ定義
//-------------------------------------------------------
//  サーミスタ数(使うアナログピン数) <= 6
#define THM_NUM (4)

//-------------------------------------------------------
//  型定義
//-------------------------------------------------------
//アナログピンで読み取った値と算出したサーミスタの情報を格納する
//サーミスタのパラメータ
typedef struct {
  //アナログピンから読み取った値を格納
  volatile int val;
  //サーミスタの抵抗値を格納
  volatile float valR;
  //サーミスタの抵抗から計算した温度を格納
  volatile float valTemp;
} thermistor;

//状態
typedef enum {
  //初期化中
  INIT,
  //温度安全圏
  SAFE,
  //温度警告区域
  WARNING,
  //温度危険区域
  DANGER
} state;

//-------------------------------------------------------
//  プロトタイプ宣言
//-------------------------------------------------------
//-------------------------------------------------------
//  最高許容温度取得
//-------------------------------------------------------
float getAllowableTempMax(void);

//-------------------------------------------------------
//  最低許容温度取得
//-------------------------------------------------------
float getAllowableTempMin(void);

//-------------------------------------------------------
//  読み込んだ電圧からサーミスタの抵抗を計算
//  引数：analogReadで読んだサーミスタの電圧値をそのまま
//  戻り値：サーミスタの抵抗値
//-------------------------------------------------------
float calcR(int val);

//-------------------------------------------------------
//  抵抗から温度計算
//  引数：サーミスタの抵抗値
//  戻り値：サーミスタの温度
//-------------------------------------------------------
float calcTemp(float r);

//-------------------------------------------------------
//  サーミスタのパラメータの配列から最高温度取得
//  引数：サーミスタのパラメータ配列の先頭のポインタ
//  戻り値：最高温度
//-------------------------------------------------------
float getMaxTemp(volatile thermistor *thm);

//-------------------------------------------------------
//  サーミスタのパラメータの配列から最低温度取得
//  引数：サーミスタのパラメータ配列の先頭のポインタ
//  戻り値：最低温度
//-------------------------------------------------------
float getMinTemp(volatile thermistor *thm);

//-------------------------------------------------------
//  サーミスタのパラメータの配列から平均温度取得
//  引数：サーミスタのパラメータ配列の先頭のポインタ
//  戻り値：平均温度
//-------------------------------------------------------
float getAvrTemp(volatile thermistor *thm);

#endif
