/*
 *  電圧の測定はサーミスタの電圧降下を測定
 *
 *      |
 *      _
 *     | | R=10kΩ
 *     | |
 *      -
 *      |
 *      ・-----・ Vd(アナログピンで読み取り、10bitADCで変換されるので実際の電圧にするには4.9mVを掛け算する)
 *      |
 *      _
 *     | | サーミスタ r
 *     | |
 *      -
 *      |
 *
 *    Vd = { 5/(10k+r) } x r よりrを算出
 *
 *  温度T0=25度のときのサーミスタの抵抗値R0=10kΩ
 *  データシートよりB定数(25度/50度)は3380K
 *
 *  抵抗から温度を算出する式
 *    T = 1/{ln(r/R0)/B + 1/(T0+273)} -273
 */

#ifndef AMS_TEMP_MONITOR
#define AMS_TEMP_MONITOR

//-------------------------------------------------------
#include <math.h>

//-------------------------------------------------------
//  型定義
//-------------------------------------------------------
//アナログピンで読み取った値と算出したサーミスタの情報を格納する
//サーミスタのパラメータ
typedef struct {
  //アナログピンから読み取った値を格納
  volatile int val;
  //サーミスタの抵抗値を格納
  volatile float valR;
  //サーミスタの抵抗から計算した温度を格納
  volatile float valTemp;
} thermistor;

//  サーミスタのクラス
class Thermistor {
  private:
  //アナログピンから読み取った値を格納(0~1023)
  volatile int val;
  //サーミスタの抵抗値を格納
  volatile float r;
  //サーミスタの抵抗から計算した温度を格納
  volatile float temp;

  public:
  Thermistor();
  char setVal(int val);
  int getVal() volatile;
  float getR();
  float getTemp();
};

inline int Thermistor::getVal() volatile {
  return val;
}

inline float Thermistor::getR() {
  return r;
}

inline float Thermistor::getTemp() {
  return temp;
}

//状態
enum class State {
  //初期化中
  INIT,
  //温度安全圏
  SAFE,
  //温度警告区域
  WARNING,
  //温度危険区域
  DANGER
};

//-------------------------------------------------------
//  名前空間AmsTempMonitorの関数だけで温度監視AMSが完結する
//-------------------------------------------------------
namespace AmsTempMonitor {
  extern void (*readValofThm)();

  //-------------------------------------------------------
  //  AMSの初期化, maxTemp/minTempはデフォルトで30/0℃
  //  引数：thmNum サーミスタの数(マスター側の場合はスレーブ機の台数)
  //       maxTemp 許容する最高温度, minTemp 許容する最低温度
  //       judgeFlag 温度の判定まで行う場合は1, 測定のみは0
  //-------------------------------------------------------
  void initAMS(unsigned char thmNum, const float maxTemp, const float minTemp, unsigned char judgeFlag);
  void initAMS(unsigned char thmNum, unsigned char judgeFlag);

  //-------------------------------------------------------
  //  analogReadで読み取った値をセットする
  //  引数：index サーミスタの番号(0~サーミスタの数-1)
  //       val 読み取った値
  //  戻り値：成功=1, 失敗=0
  //-------------------------------------------------------
  unsigned char setValofThm(unsigned char index, int val);

  //-------------------------------------------------------
  //  サーミスタから読み取った値をそれぞれセットする処理を関数として
  //  まとめたものを渡す
  //  わからなければloopの中でsetValToThmを実行して値をセット
  //  引数：上記関数のポインタ
  //-------------------------------------------------------
  void setReadThmFunc(void (*f)());

  //-------------------------------------------------------
  //  loopの中に一回記述することでAMSが動く
  //  引数：現在の時間(millis()でプログラム開始からの時間を渡す)
  //  戻り値：dangerFlag
  //-------------------------------------------------------
  unsigned char runAMS(unsigned long nowTime);

  //-------------------------------------------------------
  //  温度判定
  //  引数にフラグを渡してそこに判定結果を代入
  //  引数：maxTemp, minTemp
  //       warningFlagのポインタ, dangerFlagのポインタ
  //-------------------------------------------------------
  void judgeTemp(float maxTemp, float minTemp, unsigned char *wFlag, unsigned char *dFlag);

  namespace AmsParams {
    //-------------------------------------------------------
    //  サーミスタの抵抗値取得
    //  引数：index サーミスタの番号(0~サーミスタの数-1)
    //  戻り値：サーミスタの抵抗値, 範囲外のindexの時は0
    //-------------------------------------------------------
    float getThmR(unsigned char index);

    //-------------------------------------------------------
    //  サーミスタの温度取得
    //  引数：index サーミスタの番号(0~サーミスタの数-1)
    //  戻り値：サーミスタの温度, 範囲外のindexの時は-273
    //-------------------------------------------------------
    float getThmTemp(unsigned char index);

    //-------------------------------------------------------
    //  サーミスタのパラメータの配列から最高温度取得
    //  戻り値：最高温度
    //-------------------------------------------------------
    float getMaxTemp();
    int getMaxVal();

    //-------------------------------------------------------
    //  サーミスタのパラメータの配列から最低温度取得
    //  戻り値：最低温度
    //-------------------------------------------------------
    float getMinTemp();
    int getMinVal();

    //-------------------------------------------------------
    //  サーミスタのパラメータの配列から平均温度取得
    //  戻り値：平均温度
    //-------------------------------------------------------
    float getAvrTemp();
    int getAvrVal();
  }
}

//-------------------------------------------------------
//  プロトタイプ宣言
//-------------------------------------------------------
//-------------------------------------------------------
//  読み込んだ電圧からサーミスタの抵抗を計算
//  引数：analogReadで読んだサーミスタの電圧値をそのまま
//  戻り値：サーミスタの抵抗値
//-------------------------------------------------------
float calcR(int val);

//-------------------------------------------------------
//  抵抗から温度計算
//  引数：サーミスタの抵抗値
//  戻り値：サーミスタの温度
//-------------------------------------------------------
float calcTemp(float r);

#endif
